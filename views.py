from pydantic import BaseModel
from models import Statistic, Individual

class StringSchema(BaseModel):
    analysis: int
    signals: int
    screenshot: int
    help: int


class TargetSchema(BaseModel):
    analysis_target: int
    signals_target: int
    screenshot_target: int
    help_target: int


class IndividualSchema(BaseModel):
    username: str
    analysis: int
    signals: int
    screenshot: int
    help: int
    points: int


async def create_chat_entry(chat_id, new_db_string: StringSchema):
    new_db_string = await Statistic.create(chat_id, **new_db_string.dict())
    return new_db_string


async def create_user_entry(telegram_user_id, chat_id, new_db_string: IndividualSchema):
    new_db_string = await Individual.create(telegram_user_id, chat_id, **new_db_string.dict())
    return new_db_string


async def update_chat_parameter_or_target(chat_id: int, existed_db_string: StringSchema | TargetSchema):
    return await Statistic.update(chat_id, **existed_db_string.dict())


async def update_user_parameter(telegram_user_id: int, existed_db_string: IndividualSchema):
    return await Individual.update(telegram_user_id, **existed_db_string.dict())


async def update_overall_statistic_table(chat_id: int, text:str):
    # Retrieve the existing entry from the database
    same_db_string = await Statistic.get(chat_id)

    # Define a dictionary to map the text input to the corresponding field and operation
    field_map = {
        '+': ('screenshot', 1, "–ü–∞—Ä–∞–º–µ—Ç—Ä '–°–∫—Ä–∏–Ω—ã —Å–æ —Å–¥–µ–ª–∫–∞–º–∏'"),
        '-': ('screenshot', -1, "–ü–∞—Ä–∞–º–µ—Ç—Ä '–°–∫—Ä–∏–Ω—ã —Å–æ —Å–¥–µ–ª–∫–∞–º–∏'"),
        '++': ('signals', 1, "–ü–∞—Ä–∞–º–µ—Ç—Ä '–°–∏–≥–Ω–∞–ª—ã-–¥–µ—Ç–µ–∫—Ç—ã'"),
        '--': ('signals', -1, "–ü–∞—Ä–∞–º–µ—Ç—Ä '–°–∏–≥–Ω–∞–ª—ã-–¥–µ—Ç–µ–∫—Ç—ã'"),
        '+++': ('help', 1, "–ü–∞—Ä–∞–º–µ—Ç—Ä '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'"),
        '---': ('help', -1, "–ü–∞—Ä–∞–º–µ—Ç—Ä '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'"),
        '++++': ('analysis', 1, "–ü–∞—Ä–∞–º–µ—Ç—Ä '–†–∞–∑–±–æ—Ä —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫'"),
        '----': ('analysis', -1, "–ü–∞—Ä–∞–º–µ—Ç—Ä '–†–∞–∑–±–æ—Ä —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫'")
    }
    # Get the field and operation from the field_map
    field, operation, message = field_map.get(text, (None, None, None))
    if field:
        # Perform the operation on the specified field
        setattr(same_db_string, field, getattr(same_db_string, field) + operation)
        message_text = f"{message} —É{'–≤–µ–ª–∏—á–µ–Ω' if operation > 0 else '–º–µ–Ω—å—à–µ–Ω'} –Ω–∞ 1."
        # Convert the updated object to a dictionary
        updated_values = same_db_string.__dict__
        # Call the update function to save the updated values to the database
        await update_chat_parameter_or_target(chat_id, existed_db_string=StringSchema(**updated_values))
        return message_text


async def update_individual_statistic_table(telegram_user_id: int, text:str):
    points_mapping = {
        "+": (1, "screenshot"),
        "++": (2, "signals"),
        "+++": (5, "help"),
        "++++": (10, "analysis"),
    }
    # Retrieve the existing entry from the database
    same_db_string = await Individual.get(telegram_user_id)
    if text in points_mapping:
        points, field = points_mapping[text]
        setattr(same_db_string, field, getattr(same_db_string, field) + 1)
        same_db_string.points += points
        message_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{same_db_string.username} –ø–æ–ª—É—á–∞–µ—Ç {points} –æ—á–∫–æ–≤."
        # Convert the updated object to a dictionary
        updated_values = same_db_string.__dict__
        # Call the update function to save the updated values to the database
        await update_user_parameter(telegram_user_id, existed_db_string=IndividualSchema(**updated_values))
        return message_text

async def set_the_value_for_parameter(chat_id: int, param: int, value: int):
    same_db_string = await Statistic.get(chat_id)
    if param > 4:
        return 'üßê –ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 4, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—è –Ω–æ–º–µ—Ä—É –∫–∞–∂–¥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.'

    param_mapping = {
        1: ('screenshot', '–°–∫—Ä–∏–Ω—ã —Å–æ —Å–¥–µ–ª–∫–∞–º–∏'),
        2: ('signals', '–°–∏–≥–Ω–∞–ª—ã-–¥–µ—Ç–µ–∫—Ç—ã'),
        3: ('help', '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'),
        4: ('analysis', '–†–∞–∑–±–æ—Ä —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫')
    }
    param_name, output_name = param_mapping.get(param)
    if param_name:
        setattr(same_db_string, param_name, value)
        message_text = f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{output_name}' —É–≤–µ–ª–∏—á–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {value}."
    else:
        message_text = f'–ü–∞—Ä–∞–º–µ—Ç—Ä —Å –Ω–æ–º–µ—Ä–æ–º {param} –Ω–µ –Ω–∞–π–¥–µ–Ω.'

    updated_values = same_db_string.__dict__
    await update_chat_parameter_or_target(chat_id, existed_db_string=StringSchema(**updated_values))
    return message_text


async def set_the_target_for_parameter(chat_id: int, param: int, target: int):
    # Retrieve the existing entry from the database
    same_db_string = await Statistic.get(chat_id)
    if param > 4:
        return 'üßê –ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 4, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—è –Ω–æ–º–µ—Ä—É –∫–∞–∂–¥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.'

    param_mapping = {
        1: ('screenshot_target', '–°–∫—Ä–∏–Ω—ã —Å–æ —Å–¥–µ–ª–∫–∞–º–∏'),
        2: ('signals_target', '–°–∏–≥–Ω–∞–ª—ã-–¥–µ—Ç–µ–∫—Ç—ã'),
        3: ('help_target', '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'),
        4: ('analysis_target', '–†–∞–∑–±–æ—Ä —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫')
    }
    param_name, output_name = param_mapping.get(param)
    if param_name:
        setattr(same_db_string, param_name, target)
        message_text = f"–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{output_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target}."
    else:
        message_text = f'–ü–∞—Ä–∞–º–µ—Ç—Ä —Å –Ω–æ–º–µ—Ä–æ–º {param} –Ω–µ –Ω–∞–π–¥–µ–Ω.'
    # if param <= 4:
    #     if param == 1:
    #     # Increase the analysis field by 1
    #         same_db_string.analysis_target = target
    #         message_text = f"–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '–†–∞–∑–±–æ—Ä —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target}."
    #     elif param == 2:
    #         same_db_string.signals_target = target
    #         message_text = f"–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '–°–∏–≥–Ω–∞–ª—ã-–¥–µ—Ç–µ–∫—Ç—ã' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target}."
    #     elif param == 3:
    #         same_db_string.screenshot_target = target
    #         message_text = f"–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '–°–∫—Ä–∏–Ω—ã —Å–æ —Å–¥–µ–ª–∫–∞–º–∏' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target}."
    #     elif param == 4:
    #         same_db_string.help_target = target
    #         message_text = f"–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target}."
    # else:
    #     message_text = f'üßê –ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 4, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—è –Ω–æ–º–µ—Ä—É –∫–∞–∂–¥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.'
    # Convert the updated object to a dictionary
    updated_values = same_db_string.__dict__
    # Call the update function to save the updated values to the database
    await update_chat_parameter_or_target(chat_id, existed_db_string=TargetSchema(**updated_values))
    return message_text






